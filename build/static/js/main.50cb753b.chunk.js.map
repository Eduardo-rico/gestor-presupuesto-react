{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/Listado.js","helpers.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCreargasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50cb753b.chunk.js","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\n\nconst Error = ({mensaje}) => {\n    return (\n        <p className='alert alert-danger error'>{mensaje}</p>\n    )\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n\nexport default Error\n","import React, { Fragment, useState } from 'react';\nimport Error from './Error'\n\nimport PropTypes from 'prop-types'\n\nconst Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\n    const [cantidad, guardarCantidad] = useState(0);\n\n    //el estado del error\n    const [error, guardarError] = useState(false)\n\n    //funcion que lee el presupuesto del form\n    const definirPresupuesto = (e) => {\n        //e como parametro para acceder a los valores\n        //console.log(parseInt(e.target.value));\n        //pasa de string a int\n\n        guardarCantidad(parseInt(e.target.value, 10))\n\n        //tambien se puede poner en el onchange = { e => guardarCantidad(parseInt(e.target.value, 10))}\n    }\n\n    //funcion que define el presupuesto en onSubmit\n    const agregarPresupuesto = (e) => {\n        e.preventDefault();\n        \n        //validar\n        if (cantidad < 1 || isNaN( cantidad )){\n            guardarError(true)\n            return; //que no se olvide el return \n        }\n\n        //si pasa la validacion quÃ© pasa\n        guardarError(false);\n        guardarPresupuesto(cantidad)\n        guardarRestante(cantidad)\n        actualizarPregunta(false)\n\n    }\n\n    return (\n        <Fragment>\n            <h2>Coloca tu presupuesto</h2>\n            { error ? <Error mensaje='El presupuesto es incorrecto' /> :null}\n            <form\n                onSubmit={agregarPresupuesto}\n            >\n                <input\n                    type='number'\n                    className='u-full-width'\n                    placeholder='Coloca tu presupuesto'\n                    onChange={definirPresupuesto}\n                />\n\n                <input\n                    type='submit'\n                    className='button-primary u-full-width'\n                    value='Definir presupuesto'\n                />\n            </form>\n        </Fragment>\n    )\n}\n\nPregunta.propTypes = {\n    guardarPresupuesto: PropTypes.func.isRequired,\n    guardarRestante: PropTypes.func.isRequired,\n    actualizarPregunta: PropTypes.func.isRequired\n}\n\n\nexport default Pregunta\n","import React, { useState } from 'react'\nimport Error from './Error'\nimport shortid from 'shortid'\n\nimport PropTypes from 'prop-types'\n\n\nconst Formulario = ({guardarGasto, guardarCreargasto}) => {\n    const [nombre, guardarNombre] = useState('')\n    const [cantidad, guardarCantidad] = useState(0)\n    const [error, guardarError] = useState(false)\n    //cuando el usr agrega un gasto\n    const agregarGasto = e =>{\n        e.preventDefault();\n        \n        //validar\n        if(cantidad < 1 || isNaN(cantidad) || nombre.trim() === ''){\n            guardarError(true)\n            return\n        }\n        //para eliminar el mensaje de error, cuando todo esta bien\n        guardarError(false)\n        //construir el gasto\n        const gasto = {\n            nombre, \n            cantidad,\n            id: shortid.generate()\n        }\n\n       //console.log(gasto);\n\n        \n        //pasar el gasto al componente principal\n        guardarGasto(gasto)\n        guardarCreargasto(true)\n\n        //resetear el form\n        guardarNombre('')\n        guardarCantidad(0)\n\n    }\n\n\n    return (\n        <form onSubmit={agregarGasto}> \n            <h2>Agrega tus gastos aqui</h2>\n            { error ? <Error mensaje='Ambos campos son obligatorio o el presupuesto es incorrecto' /> : null}\n            <div className='campo'>\n                <label>Nombre gasto</label>\n                <input \n                    type='text'\n                    className='u-full-width'\n                    placeholder='Ej. Transporte'\n                    value={nombre}\n                    onChange={e => guardarNombre(e.target.value)}\n                />\n                <label>Cantidad gasto</label>\n                <input \n                    type='number'\n                    className='u-full-width'\n                    placeholder='Ej. 300'\n                    value={cantidad}\n                    onChange={e => guardarCantidad(parseInt(e.target.value, 10))}\n                />\n\n                <input\n                    type='submit'\n                    className='button-primary u-full-width'\n                    value='Agregar Gasto'\n                />\n                \n\n            </div>\n        </form>\n    )\n}\n\nFormulario.propTypes = {\n    guardarGasto: PropTypes.func.isRequired,\n    guardarCreargasto: PropTypes.func.isRequired\n}\n\n\nexport default Formulario\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Gasto = ({gasto}) => (\n    <li className='gastos'>\n        <p>\n        {gasto.nombre}\n            <span className='gasto'>$ {gasto.cantidad}</span>\n        </p>\n    </li>\n)\n\nGasto.propTypes = {\n    gasto: PropTypes.object.isRequired\n}\n\nexport default Gasto\n","import React from 'react'\nimport Gasto from './Gasto'\nimport PropTypes from 'prop-types'\n\nconst Listado = ({gastos}) => {\n    return (\n        <div className='gastos-realizados'>\n            <h2>Gastos realizados</h2>\n            {gastos.map( gasto => (\n                <Gasto \n                    gasto={gasto}\n                    key={gasto.id}\n                />\n            ))}\n        </div>\n    )\n}\n\nListado.propTypes = {\n    gastos: PropTypes.array.isRequired\n}\n\nexport default Listado\n","export const revisarPresupuesto = (presupuesto, restante) => {\n    let clase;\n    if( (presupuesto / 4) > restante ){\n        clase = 'alert alert-danger'\n    }else if( (presupuesto/2) > restante){\n        clase = 'alert alert-warning'\n    }else{\n        clase = 'alert alert-success'\n    }\n\n    return clase\n}","import React, { Fragment } from 'react'\nimport {revisarPresupuesto} from '../helpers'\nimport PropTypes from 'prop-types'\n\nconst ControlPresupuesto = ({presupuesto, restante}) => {\n    return (\n        <Fragment>\n            <div className='alert alert-primary'>\n                Presupuesto: $ {presupuesto}\n            </div>\n            <div className={revisarPresupuesto(presupuesto, restante)}>\n                Restante: $ {restante}\n            </div>\n        </Fragment>\n    )\n}\n\nControlPresupuesto.propTypes = {\n    presupuesto: PropTypes.number.isRequired,\n    restante: PropTypes.number.isRequired\n}\n\nexport default ControlPresupuesto\n","import React, { useState, useEffect } from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n\n  //definir el state que fluye por varios componentes al de Pregunta\n  const [presupuesto, guardarPresupuesto] = useState(0)\n  const [restante, guardarRestante] = useState(0)\n\n  //carga condicional\n  const [mostrarpregunta, actualizarPregunta] = useState(true)\n\n  //crear listado de gastos\n  const [gastos, guardarGastos] = useState([])\n\n  //\n  const [gasto, guardarGasto] = useState({})\n  const [creargasto, guardarCreargasto] = useState(false)\n  //useeffect que actualiza el restante\n  useEffect( () => {\n    if(creargasto){\n\n      //agrega el nuevo presupuesto\n      guardarGastos([\n        ...gastos,\n        gasto\n      ])\n      //resta del presupuesto actual\n\n      const presupuestoRestante = restante - gasto.cantidad\n      guardarRestante(presupuestoRestante)\n    }\n    guardarCreargasto(false)\n  }, [gasto, gastos, creargasto, restante])\n\n//  //cuando agregamos un nuevo gasto\n//   const agregarNuevoGasto = gasto => {\n//     //console.log(gasto);\n//     guardarGastos([\n//       ...gastos,\n//       gasto\n//     ])\n//   }\n\n  return (\n    <div className='container'>\n      <header>\n        <h1>Gasto semanal</h1>\n        <div className='contenido-principal contenido'>\n          { mostrarpregunta ? (\n              <Pregunta\n                guardarPresupuesto={guardarPresupuesto}\n                guardarRestante={guardarRestante}\n                actualizarPregunta={actualizarPregunta}\n              />\n          ) : (\n            <div className='row'>\n              <div className='one-half column'>\n                <Formulario \n                  guardarGasto={guardarGasto}\n                  guardarCreargasto={guardarCreargasto}\n                />\n              </div>\n\n              <div className='one-half column'>\n                <Listado gastos={gastos}/>\n                <ControlPresupuesto \n                  presupuesto={presupuesto}\n                  restante={restante}\n                />\n              </div>\n\n          </div>\n\n          ) }\n        </div>\n      </header>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}